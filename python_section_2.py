# -*- coding: utf-8 -*-
"""python_section_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1frtpMahZ_HQfEa0sl9kUqjWH8a2reNXv
"""

#Q9)

import pandas as pd
import numpy as np

# Load the dataset (ensure the path is correct)
df = pd.read_csv("C:/Users/DPU-ResmMed-S/Downloads/dataset-2.csv")

def calculate_distance_matrix(df) -> pd.DataFrame:
    """
    Calculate a distance matrix based on the dataframe, df.

    Args:
        df (pandas.DataFrame): DataFrame containing 'id_start', 'id_end', and 'distance' columns

    Returns:
        pandas.DataFrame: Distance matrix with cumulative distances
    """
    # Extract unique toll locations from the 'id_start' and 'id_end' columns
    toll_locations = pd.concat([df['id_start'], df['id_end']]).unique()
    toll_locations.sort()

    # Initialize a DataFrame for the distance matrix with 'inf' as initial values
    distance_matrix = pd.DataFrame(np.inf, index=toll_locations, columns=toll_locations)

    # Set diagonal values to 0 (distance from any location to itself is zero)
    np.fill_diagonal(distance_matrix.values, 0)

    # Populate the distance matrix with the known distances
    for _, row in df.iterrows():
        loc_a = row['id_start']
        loc_b = row['id_end']
        distance = row['distance']

        # Set both directions (A to B and B to A) for the symmetric matrix
        distance_matrix.loc[loc_a, loc_b] = distance
        distance_matrix.loc[loc_b, loc_a] = distance

    # Use Floyd-Warshall algorithm to calculate cumulative distances between all pairs of toll locations
    for k in toll_locations:
        for i in toll_locations:
            for j in toll_locations:
                distance_matrix.loc[i, j] = min(distance_matrix.loc[i, j],
                                                distance_matrix.loc[i, k] + distance_matrix.loc[k, j])

    return distance_matrix

# Calculate the distance matrix
distance_matrix = calculate_distance_matrix(df)

# Display the resulting distance matrix
print(distance_matrix)

#Q10)

import pandas as pd

def unroll_distance_matrix(distance_matrix: pd.DataFrame) -> pd.DataFrame:
    """
    Unroll the distance matrix into a DataFrame with three columns: id_start, id_end, and distance.

    Args:
        distance_matrix (pandas.DataFrame): Symmetric distance matrix with toll locations as both index and columns

    Returns:
        pd.DataFrame: DataFrame with id_start, id_end, and distance, excluding diagonal (same id_start to id_end).
    """
    # Create a list of dictionaries to hold the unrolled data
    unrolled_data = []

    # Iterate over each pair of toll locations in the matrix
    for id_start in distance_matrix.index:
        for id_end in distance_matrix.columns:
            if id_start != id_end:  # Exclude same id_start to id_end (diagonal elements)
                distance = distance_matrix.loc[id_start, id_end]
                unrolled_data.append({
                    'id_start': id_start,
                    'id_end': id_end,
                    'distance': distance
                })

    # Convert the list of dictionaries into a DataFrame
    unrolled_df = pd.DataFrame(unrolled_data)
    return unrolled_df

# Example usage:

unrolled_df = unroll_distance_matrix(distance_matrix)
print(unrolled_df)

#Q11)

import pandas as pd

def find_ids_within_ten_percentage_threshold(unrolled_df: pd.DataFrame, reference_id: int) -> pd.DataFrame:
    """
    Find all IDs whose average distance lies within 10% of the average distance of the reference ID.

    Args:
        df (pandas.DataFrame): DataFrame with 'id_start', 'id_end', and 'distance' columns.
        reference_id (int): The reference 'id_start' for which the average distance is used.

    Returns:
        pandas.DataFrame: DataFrame with IDs whose average distance is within the 10% threshold
                          of the reference ID's average distance.
    """
    # Calculate the average distance for the reference ID
    reference_avg_distance = unrolled_df[unrolled_df['id_start'] == reference_id]['distance'].mean()

    # Calculate the 10% threshold for the reference average distance
    lower_bound = reference_avg_distance * 0.9
    upper_bound = reference_avg_distance * 1.1

    # Create a DataFrame to store the results
    result_ids = []

    # Group by 'id_start' and calculate the average distance for each 'id_start'
    avg_distances = unrolled_df.groupby('id_start')['distance'].mean().reset_index()

    # Find all IDs whose average distance is within the 10% threshold
    filtered_ids = avg_distances[(avg_distances['distance'] >= lower_bound) & (avg_distances['distance'] <= upper_bound)]

    # Sort by 'id_start' and return
    filtered_ids_sorted = filtered_ids.sort_values('id_start').reset_index(drop=True)

    return filtered_ids_sorted

# Example usage:

reference_id = 1001408  # Example reference ID
ids_within_threshold = find_ids_within_ten_percentage_threshold(unrolled_df, reference_id)
print(ids_within_threshold)

#Q12)

import pandas as pd

#  existing DataFrame
data = {
    'id_start': [1001406, 1001408, 1001410, 1001464, 1001466, 1001468, 1001470],
    'id_end': [201.673810, 183.590476, 174.869048, 168.911905, 175.995238, 185.421429, 195.264286]  # Use id_end instead of distance
}

df = pd.DataFrame(data)

def calculate_toll_rate(df: pd.DataFrame) -> pd.DataFrame:
    """
    Calculate toll rates for each vehicle type based on the id_end values (acting as distance).

    Args:
        df (pandas.DataFrame): DataFrame containing the 'id_end' column.

    Returns:
        pandas.DataFrame: DataFrame with added toll rate columns for each vehicle type.
    """
    # Define rate coefficients for each vehicle type
    rate_coefficients = {
        'moto': 0.8,
        'car': 1.2,
        'rv': 1.5,
        'bus': 2.2,
        'truck': 3.6
    }

    # Add toll rate columns for each vehicle type by multiplying id_end (used as distance) by the rate coefficient
    df['moto'] = df['id_end'] * rate_coefficients['moto']
    df['car'] = df['id_end'] * rate_coefficients['car']
    df['rv'] = df['id_end'] * rate_coefficients['rv']
    df['bus'] = df['id_end'] * rate_coefficients['bus']
    df['truck'] = df['id_end'] * rate_coefficients['truck']

    return df

# Apply the function to the DataFrame
result_df = calculate_toll_rate(df)

# Display the resulting DataFrame
print(result_df)

#Q13)

import pandas as pd
import numpy as np
from datetime import datetime, time, timedelta

def calculate_time_based_toll_rates(result_df: pd.DataFrame) -> pd.DataFrame:
    """
    Calculate time-based toll rates for different time intervals within a day and across all days of the week.

    Args:
        df (pandas.DataFrame): Input DataFrame with 'id_start' and 'id_end' columns.

    Returns:
        pandas.DataFrame: DataFrame with additional columns for time intervals and day, and adjusted toll rates.
    """
    # Time discount factors for weekdays (Monday - Friday)
    weekday_discount_factors = [
        (time(0, 0, 0), time(10, 0, 0), 0.8),
        (time(10, 0, 0), time(18, 0, 0), 1.2),
        (time(18, 0, 0), time(23, 59, 59), 0.8)
    ]

    # Weekend discount factor (Saturday and Sunday)
    weekend_discount_factor = 0.7

    # List of days and their weekday/weekend classification
    days_of_week = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']

    # Create an empty list to store results
    expanded_rows = []

    # Iterate over each row in the input DataFrame
    for idx, row in df.iterrows():
        id_start = row['id_start']
        id_end = row['id_end']
        moto = row['moto']
        car = row['car']
        rv = row['rv']
        bus = row['bus']
        truck = row['truck']

        # Iterate over each day of the week
        for day in days_of_week:
            is_weekend = day in ['Saturday', 'Sunday']

            # Apply time-based discounts for each period
            if is_weekend:
                # Weekend: constant discount factor for all times
                discount_factor = weekend_discount_factor
                start_time = time(0, 0, 0)
                end_time = time(23, 59, 59)

                # Adjust toll rates
                row_data = {
                    'id_start': id_start,
                    'id_end': id_end,
                    'start_day': day,
                    'start_time': start_time,
                    'end_day': day,
                    'end_time': end_time,
                    'moto': moto * discount_factor,
                    'car': car * discount_factor,
                    'rv': rv * discount_factor,
                    'bus': bus * discount_factor,
                    'truck': truck * discount_factor
                }
                expanded_rows.append(row_data)
            else:
                # Weekday: apply time-based discounts for different intervals
                for start_t, end_t, factor in weekday_discount_factors:
                    row_data = {
                        'id_start': id_start,
                        'id_end': id_end,
                        'start_day': day,
                        'start_time': start_t,
                        'end_day': day,
                        'end_time': end_t,
                        'moto': moto * factor,
                        'car': car * factor,
                        'rv': rv * factor,
                        'bus': bus * factor,
                        'truck': truck * factor
                    }
                    expanded_rows.append(row_data)

    # Create a new DataFrame from the expanded rows
    result_df1 = pd.DataFrame(expanded_rows)

    return result_df1

# Apply the function to the DataFrame
result_df1 = calculate_time_based_toll_rates(result_df)

# Display the resulting DataFrame
print(result_df1)